// Synopsys, Inc.
// User: qamar
// Date: Mon May 12 12:39:06 2025

// ==================================================================================================
// This config file prototype is produced from the last run using the complete list of extracted fsms.
// Please note that by providing your own description of the module you are enforcing what will be
// extracted for that module.
// Copy this file to your source directory and edit it as described below,
// then pass the file to VCS using the -cm_fsmcfg command line option.
// FSMs will be extracted normally for any module not mentioned in this file
// ==================================================================================================
// 1. For every module that you want to specify yourself, use:
//      MODULE==name
//    -----------------------------------------------------
//    The following options are defining the behavior on the module level.
//    -----------------------------------------------------
//    1.1  You can control what fsms should be used within this module:
//            FSMS=AUTO
//            this means that you want VCS to automatically extract all
//            detectable FSMs from this module.
//            -----------------------------------------------------
//            FSMS=EXCLUDE
//            this means that you want all fsms except the ones from the list that follows
//            if the list is empty, all fsms will be extracted for this module
//            -----------------------------------------------------
//            FSMS=RESTRICT
//            this means that you want only the fsms from the list that follows
//            if the list is empty, no fsms will be extracted for this module
//            -----------------------------------------------------
//         If none of these options are specified, the program will assume FSMS=RESTRICT
//         -----------------------------------------------------
//     1.2 You can specify that the state with the minimal value should be used as a
//         start state for all sequences in every fsm in the module.
//            FSMS=START_STATE_DFLT
//         For any particular fsm you can overwrite this behavior inside its description.
//    -----------------------------------------------------
// 2. Each fsm description in the list of fsms should be specified as follows:
//      2.1 provide the current state variable declaration:
//          CURRENT= name of the current state variable
//      -----------------------------------------------------
//      2.2 if next state variable is different from the current state provide:
//          NEXT= next state variable
//          if you don't use NEXT=, the program will assume that CURRENT and NEXT are the same
//      -----------------------------------------------------
//      2.3 if you want to provide the restrictive the list of states, provide:
//          STATES= s0,s1 etc. where s0 is either a name or a value of the state
//          if you don't use STATES=, the program will assume that you want to use all states
//      -----------------------------------------------------
//      2.4 if you want to ignore some states, specify them in the following list:
//          STATES_X= s0,s1, etc.
//      -----------------------------------------------------
//      2.5 if you want to mark, that some states should never be reached, specify them as a list:
//          STATES_NEVER= s0,s1, etc.
//      -----------------------------------------------------
//      2.6 similar to the STATES, if you want to provide the restrictive the list of transitions, specify:
//          TRANSITIONS= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.7 similar to the STATES_X, if you want to ignore some transitions, specify them in the following list:
//          TRANSITIONS_X= s0->s1,s1->s2, etc.
//      -----------------------------------------------------
//      2.8 similar to the STATES_NEVER,if you want to mark, that some transitions should never occur,
//          specify them as a list:
//          TRANSITIONS_NEVER= s0->s1,s1->s2,     etc.
//      -----------------------------------------------------
//      2.9 if you want to specify the start state use:
//          START_STATE= s0
//      -----------------------------------------------------
//      Please note:
//          - that a state in every list can be specified either by name or by value.
//          - in specifying the transitions you can use * in order to refer to 'any' state.
// ==================================================================================================
// Uncomment and modify the following 2 line to override default FSM sequence limits for all FSMs in the design.
//SEQ_NUMBER_MAX=10000
//SEQ_LENGTH_MAX=32

MODULE=uart_wb
CURRENT=wbstate
NEXT=wbstate
STATES='h0,'h1,'h2,'h3
TRANSITIONS='h0->'h1,
'h1->'h0,
'h1->'h2,
'h2->'h0,
'h2->'h3,
'h3->'h0
MODULE=iadu
CURRENT=state
NEXT=next_state
STATES=STATE_FETCH_UPPER,STATE_HOLD,STATE_NORMAL
TRANSITIONS=STATE_FETCH_UPPER->STATE_HOLD,
STATE_FETCH_UPPER->STATE_NORMAL,
STATE_HOLD->STATE_NORMAL,
STATE_NORMAL->STATE_FETCH_UPPER,
STATE_NORMAL->STATE_HOLD
MODULE=uart_receiver
CURRENT=rstate
NEXT=rstate
STATES=sr_ca_lc_parity,sr_check_parity,sr_end_bit,sr_idle,sr_push,sr_rec_bit,sr_rec_parity,sr_rec_prepare,sr_rec_start,sr_rec_stop,sr_wait1
TRANSITIONS=sr_ca_lc_parity->sr_check_parity,
sr_ca_lc_parity->sr_idle,
sr_check_parity->sr_idle,
sr_check_parity->sr_wait1,
sr_end_bit->sr_idle,
sr_end_bit->sr_rec_bit,
sr_end_bit->sr_rec_parity,
sr_end_bit->sr_rec_stop,
sr_idle->sr_rec_start,
sr_push->sr_idle,
sr_push->sr_rec_start,
sr_rec_bit->sr_end_bit,
sr_rec_bit->sr_idle,
sr_rec_parity->sr_ca_lc_parity,
sr_rec_parity->sr_idle,
sr_rec_prepare->sr_idle,
sr_rec_prepare->sr_rec_bit,
sr_rec_start->sr_idle,
sr_rec_start->sr_rec_prepare,
sr_rec_stop->sr_idle,
sr_rec_stop->sr_push,
sr_wait1->sr_idle,
sr_wait1->sr_rec_stop
MODULE=plic_gateway
CURRENT=state
NEXT=next_state
STATES=IDLE,REQUEST,WAIT_COMPLETE
TRANSITIONS=IDLE->REQUEST,
REQUEST->IDLE,
REQUEST->WAIT_COMPLETE,
WAIT_COMPLETE->IDLE,
WAIT_COMPLETE->REQUEST
MODULE=simple_spi
CURRENT=state
NEXT=state
STATES='h0,'h1,'h2,'h3
TRANSITIONS='h0->'h1,
'h1->'h0,
'h1->'h3,
'h2->'h0,
'h3->'h0,
'h3->'h1
MODULE=atomic_access_controller
CURRENT=state
NEXT=next_state
STATES=EXECUTE,IDLE,LR_WAIT,READ,SC_WRITE,WRITE
TRANSITIONS=EXECUTE->IDLE,
EXECUTE->WRITE,
IDLE->LR_WAIT,
IDLE->READ,
IDLE->SC_WRITE,
LR_WAIT->IDLE,
READ->EXECUTE,
READ->IDLE,
SC_WRITE->IDLE,
WRITE->IDLE
MODULE=i2c_master_bit_ctrl
CURRENT=c_state
NEXT=c_state
STATES=idle,rd_a,rd_b,rd_c,rd_d,start_a,start_b,start_c,start_d,start_e,stop_a,stop_b,stop_c,stop_d,wr_a,wr_b,wr_c,wr_d
TRANSITIONS=idle->rd_a,
idle->start_a,
idle->stop_a,
idle->wr_a,
rd_a->idle,
rd_a->rd_b,
rd_b->idle,
rd_b->rd_c,
rd_c->idle,
rd_c->rd_d,
rd_d->idle,
start_a->idle,
start_a->start_b,
start_b->idle,
start_b->start_c,
start_c->idle,
start_c->start_d,
start_d->idle,
start_d->start_e,
start_e->idle,
stop_a->idle,
stop_a->stop_b,
stop_b->idle,
stop_b->stop_c,
stop_c->idle,
stop_c->stop_d,
stop_d->idle,
wr_a->idle,
wr_a->wr_b,
wr_b->idle,
wr_b->wr_c,
wr_c->idle,
wr_c->wr_d,
wr_d->idle
MODULE=uart_transmitter
CURRENT=tstate
NEXT=tstate
STATES=s_idle,s_pop_byte,s_send_byte,s_send_parity,s_send_start,s_send_stop
TRANSITIONS=s_idle->s_pop_byte,
s_pop_byte->s_idle,
s_pop_byte->s_send_start,
s_send_byte->s_idle,
s_send_byte->s_send_parity,
s_send_byte->s_send_stop,
s_send_parity->s_idle,
s_send_parity->s_send_stop,
s_send_start->s_idle,
s_send_start->s_send_byte,
s_send_stop->s_idle
MODULE=ptc_top
CURRENT=rptc_ctrl
NEXT=wb_dat_i_8_0
STATES=[PTC_RPTC_CTRL_CAPTE],[PTC_RPTC_CTRL_CNTRRST],[PTC_RPTC_CTRL_ECLK],[PTC_RPTC_CTRL_EN],[PTC_RPTC_CTRL_INT],[PTC_RPTC_CTRL_INTE],[PTC_RPTC_CTRL_SINGLE]
TRANSITIONS=[PTC_RPTC_CTRL_INTE]->[PTC_RPTC_CTRL_INT]
MODULE=core_dbg_fsm
CURRENT=pstate
NEXT=nstate
STATES=HALTED,RESUME,RUNNING
TRANSITIONS=HALTED->RESUME,
HALTED->RUNNING,
RESUME->RUNNING,
RUNNING->HALTED
MODULE=dm
CURRENT=abstractcs
NEXT=abstractcs
STATES='h1,['h1000],'h2
TRANSITIONS='h1->['h1000],
'h1->'h2,
['h1000]->'h1,
['h1000]->'h2,
'h2->['h1000]
MODULE=dm
CURRENT=pstate
NEXT=nstate
STATES=DECODE,IDLE,POST
TRANSITIONS=DECODE->IDLE,
DECODE->POST,
IDLE->DECODE,
POST->IDLE
MODULE=i2c_master_byte_ctrl
CURRENT=c_state
NEXT=c_state
STATES=ST_ACK,ST_IDLE,ST_READ,ST_START,ST_STOP,ST_WRITE
TRANSITIONS=ST_ACK->ST_IDLE,
ST_ACK->ST_STOP,
ST_IDLE->ST_READ,
ST_IDLE->ST_START,
ST_IDLE->ST_STOP,
ST_IDLE->ST_WRITE,
ST_READ->ST_ACK,
ST_READ->ST_IDLE,
ST_START->ST_IDLE,
ST_START->ST_READ,
ST_START->ST_WRITE,
ST_STOP->ST_IDLE,
ST_WRITE->ST_ACK,
ST_WRITE->ST_IDLE
MODULE=dtm
CURRENT=pstate
NEXT=nstate
STATES=CAPTURE_DR,CAPTURE_IR,EXIT1_DR,EXIT1_IR,EXIT2_DR,EXIT2_IR,PAUSE_DR,PAUSE_IR,RUN_TEST_IDLE,SELECT_DR_SCAN,SELECT_IR_SCAN,SHIFT_DR,SHIFT_IR,TEST_LOGIC_RESET,UPDATE_DR,UPDATE_IR
TRANSITIONS=CAPTURE_DR->EXIT1_DR,
CAPTURE_DR->SHIFT_DR,
CAPTURE_DR->TEST_LOGIC_RESET,
CAPTURE_IR->EXIT1_IR,
CAPTURE_IR->SHIFT_IR,
CAPTURE_IR->TEST_LOGIC_RESET,
EXIT1_DR->PAUSE_DR,
EXIT1_DR->TEST_LOGIC_RESET,
EXIT1_DR->UPDATE_DR,
EXIT1_IR->PAUSE_IR,
EXIT1_IR->TEST_LOGIC_RESET,
EXIT1_IR->UPDATE_IR,
EXIT2_DR->SHIFT_DR,
EXIT2_DR->TEST_LOGIC_RESET,
EXIT2_DR->UPDATE_DR,
EXIT2_IR->SHIFT_IR,
EXIT2_IR->TEST_LOGIC_RESET,
EXIT2_IR->UPDATE_IR,
PAUSE_DR->EXIT2_DR,
PAUSE_DR->TEST_LOGIC_RESET,
PAUSE_IR->EXIT2_IR,
PAUSE_IR->TEST_LOGIC_RESET,
RUN_TEST_IDLE->SELECT_DR_SCAN,
RUN_TEST_IDLE->TEST_LOGIC_RESET,
SELECT_DR_SCAN->CAPTURE_DR,
SELECT_DR_SCAN->SELECT_IR_SCAN,
SELECT_DR_SCAN->TEST_LOGIC_RESET,
SELECT_IR_SCAN->CAPTURE_IR,
SELECT_IR_SCAN->TEST_LOGIC_RESET,
SHIFT_DR->EXIT1_DR,
SHIFT_DR->TEST_LOGIC_RESET,
SHIFT_IR->EXIT1_IR,
SHIFT_IR->TEST_LOGIC_RESET,
TEST_LOGIC_RESET->RUN_TEST_IDLE,
UPDATE_DR->RUN_TEST_IDLE,
UPDATE_DR->SELECT_DR_SCAN,
UPDATE_DR->TEST_LOGIC_RESET,
UPDATE_IR->RUN_TEST_IDLE,
UPDATE_IR->SELECT_DR_SCAN,
UPDATE_IR->TEST_LOGIC_RESET
